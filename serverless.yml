service: texts

environment: # Service wide environment variables
  serviceEnvVar: 123456789
  LANGUAGE: ko
  DYNAMODB_TABLE: ${self:service}-${self:provider.environment.LANGUAGE}-${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: ap-northeast-2
  environment: # Service wide environment variables
    serviceEnvVar: 123456789
    LANGUAGE: ko
    DYNAMODB_TABLE: ${self:service}-${self:provider.environment.LANGUAGE}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  json:
    handler: handler.getJson
    events:
      - http:
          path: texts
          method: get
          cors: true
  createId:
    handler: handler.createId
    events:
      - http:
          path: texts/{id}
          method: post
          cors: true
  updateId:
    handler: handler.updateId
    events:
      - http:
          path: texts/{id}
          method: put
          cors: true
  deleteId:
    handler: handler.deleteId
    events:
      - http:
          path: texts/{id}
          method: delete
          cors: true

resources:
  Resources:
    TextsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

